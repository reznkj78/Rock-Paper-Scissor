{"version":3,"sources":["context/gamecontext.js","components/timer.jsx","containers/game.jsx","containers/app.js","context/gameGlobalcontext.jsx","index.js"],"names":["Gamecontext","createContext","setUserSelected","setmessage","setComputerSelected","Timer","isPlaying","duration","colors","remainingTime","Game","children","myContext","useContext","getUserSelected","getComputerSelected","getmessage","useState","computerMood","setcomputerMood","counterRound","setcounterRound","counterUserPoint","setcounterUserPoint","counterComputerPoint","setcounterComputerPoint","gameBtnDiasabled","setgameBtnDiasabled","showTimer","setShowTimer","useEffect","random","userChooseFunc","mood","className","onClick","e","icon","isEmpty","setTimeout","console","log","disabled","App","GlobalContext","props","Provider","value","render","document","getElementById"],"mappings":"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","file":"static/js/main.e61023bb.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nexport const Gamecontext = createContext({\r\n    setUserSelected:\"\",\r\n    setmessage:\"\",\r\n    setComputerSelected:\"\"\r\n}) \r\n\r\n","import React from 'react';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\n\r\nconst Timer = () => (\r\n  <CountdownCircleTimer\r\n    isPlaying\r\n    duration={2}\r\n    colors={[\r\n      ['#004777', 0.33],\r\n      ['#F7B801', 0.33],\r\n      ['#A30000', 0.33],\r\n    ]}\r\n  >\r\n    {({ remainingTime }) => remainingTime}\r\n  </CountdownCircleTimer>\r\n)\r\nexport default Timer;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { isEmpty, random } from \"lodash\";\r\nimport { Gamecontext } from \"../context/gamecontext\";\r\nimport { Icon } from '@iconify/react';\r\nimport Timer from \"../components/timer\";\r\n\r\nconst Game = ({ children }) => {\r\n  const myContext = useContext(Gamecontext);\r\n  const { \r\n      setUserSelected\r\n      , getUserSelected\r\n      ,setComputerSelected\r\n      ,getComputerSelected,\r\n      getmessage,\r\n      setmessage,\r\n    \r\n    } = myContext;\r\n\r\n    const [computerMood,setcomputerMood]=useState(\"\")\r\n    const [counterRound,setcounterRound]=useState(0);\r\n    const [counterUserPoint,setcounterUserPoint]=useState(0);\r\n    const [counterComputerPoint,setcounterComputerPoint]=useState(0);\r\n    const [gameBtnDiasabled,setgameBtnDiasabled]=useState(true)\r\n    const [showTimer,setShowTimer]=useState(false)\r\n    let timerComponent=null\r\n    \r\n\r\nuseEffect(()=>{\r\n    const computerChoose=  random(1, 3);\r\n    switch (computerChoose) {\r\n        case 1:\r\n            setComputerSelected(\"rock\")\r\n            break;\r\n        case 2:\r\n            setComputerSelected(\"paper\")\r\n            break;\r\n        case 3:\r\n            setComputerSelected(\"scissors\")\r\n            break;\r\n        default:\r\n            setComputerSelected(\"scissors\")\r\n    }\r\n},[])\r\n\r\n// USER CHOOSE FUNC\r\nconst userChooseFunc=(mood)=>{\r\n    setUserSelected(mood)\r\n    setgameBtnDiasabled(false)\r\n}\r\n\r\n\r\n\r\n\r\n// START GAME :)\r\n  const startGame = () => {\r\n    setShowTimer(true)\r\n    setcomputerMood(\"\")\r\n    setmessage(\"\")\r\n\r\n    setTimeout(() => {\r\n        setShowTimer(false)\r\n\r\n    //   counter (footer)\r\n    setcounterRound(counterRound+1)\r\n\r\n    // computer select\r\n    const computerChoose=  random(1, 3);\r\n    switch (computerChoose) {\r\n        case 1:\r\n            setComputerSelected(\"rock\")\r\n            break;\r\n        case 2:\r\n            setComputerSelected(\"paper\")\r\n            break;\r\n        case 3:\r\n            setComputerSelected(\"scissors\")\r\n            break;\r\n        default:\r\n            setComputerSelected(\"scissors\")\r\n    }\r\n\r\n// Modes for win user and computer    or equal\r\n    if(getComputerSelected===\"scissors\"&& getUserSelected===\"rock\"){\r\n        setmessage(\"you WIN\")\r\n        setcounterUserPoint(counterUserPoint+1)\r\n    }else if(getComputerSelected===\"rock\"&& getUserSelected===\"paper\"){\r\n        setmessage(\"you WIN\")\r\n        setcounterUserPoint(counterUserPoint+1)\r\n    }else if(getComputerSelected===\"paper\"&& getUserSelected===\"scissors\"){\r\n        setmessage(\"you WIN\")\r\n        setcounterUserPoint(counterUserPoint+1)\r\n    }else if(getComputerSelected===getUserSelected){\r\n        setmessage(\"game was equal\")\r\n  }else {\r\n    setmessage(\"computer WIN\")\r\n    setcounterComputerPoint(counterComputerPoint+1)\r\n  }\r\n  setcomputerMood(getComputerSelected) ;\r\n  console.log(getUserSelected)\r\n  console.log(getComputerSelected)\r\n}, 2000);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <div className=\"icon-container-header\">\r\n          <h1 onClick={(e) => userChooseFunc(\"rock\")}>\r\n            <span\r\n              className=\"iconify iconify-hader iconify-header1\"\r\n              data-icon=\"la:hand-rock\"\r\n            ></span>\r\n          </h1>\r\n          <h1 onClick={(e) =>  userChooseFunc(\"paper\")}>\r\n            <span\r\n              className=\"iconify iconify-hader iconify-header2\"\r\n              data-icon=\"la:hand-paper\"\r\n            ></span>\r\n          </h1>\r\n          <h1 onClick={(e) => userChooseFunc(\"scissors\")}>\r\n            <span\r\n              className=\"iconify iconify-hader iconify-header3\"\r\n              data-icon=\"la:hand-scissors\"\r\n            ></span>\r\n          </h1>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <div className=\"main-content\">\r\n            {/* user pannel */}\r\n          <div className=\"user\">\r\n            <h1 className=\"title\">user</h1>\r\n            <hr className=\"hr\" />\r\n            <div>\r\n\r\n              {\r\n   (() => {\r\n       if (getUserSelected === \"rock\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-rock\" />\r\n       if (getUserSelected === \"paper\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-paper-solid\" />\r\n       if (getUserSelected === \"scissors\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-scissors\" />\r\n   })()\r\n}\r\n<h1 className=\"mood\">\r\n{\r\n   (() => {\r\n       if(isEmpty(getUserSelected))\r\n       return 'please CHOOSE'\r\n       if (getUserSelected === \"rock\")\r\n          return  'ROCK'\r\n       if (getUserSelected === \"paper\")\r\n          return  'PAPER'\r\n       if (getUserSelected === \"scissors\")\r\n          return 'SCISSORS'\r\n   })()\r\n}\r\n</h1>\r\n            </div>\r\n          </div>\r\n\r\n          <p className=\"line-container\" > {(showTimer)?<Timer/>:<hr className=\"line\"/>}</p>\r\n\r\n\r\n          {/* computer panel */}\r\n          <div className=\"computer\">\r\n            <h1 className=\"title\">computer</h1>\r\n            <hr className=\"hr\" />\r\n            <div>\r\n\r\n            {\r\n   (() => {\r\n       if (computerMood === \"rock\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-rock\" />\r\n       if (computerMood === \"paper\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-paper-solid\" />\r\n       if (computerMood === \"scissors\")\r\n          return  <Icon className=\"iconify-main\" icon=\"la:hand-scissors\" />\r\n   })()\r\n}\r\n\r\n              <h1 className=\"mood\">\r\n              {\r\n   (() => {\r\n    if (isEmpty(computerMood ) && !showTimer)\r\n         return   '... The computer is waiting'\r\n       if (computerMood === \"rock\")\r\n          return  'ROCK'\r\n       if (computerMood === \"paper\")\r\n          return  'PAPER'\r\n       if (computerMood === \"scissors\")\r\n          return 'SCISSORS'\r\n   })()\r\n}\r\n              </h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button onClick={startGame} className=\"main-btn\" disabled={gameBtnDiasabled}>\r\n          GO\r\n        </button>\r\n    \r\n        {isEmpty(getUserSelected) ? (\r\n          \"\"\r\n        ) : (\r\n          <h1 className={\r\n              (getmessage===\"you WIN\")?\"message-win\":\r\n              getmessage===\"computer WIN\"?\"message-lose\":\r\n              \"message-equal\"\r\n          }>{getmessage}</h1>\r\n        )}\r\n      </main>\r\n      <footer>\r\n        <div className=\"situation-container\">\r\n          <hr />\r\n          <div className=\"situation\">\r\n            <h2>\r\n              USER POINT : <span>{counterUserPoint}</span>\r\n            </h2>\r\n            <h2>\r\n              ROUND : <span>{counterRound}</span>\r\n            </h2>\r\n            <h2>\r\n              COMPUTER POINT : <span>{counterComputerPoint}</span>\r\n            </h2>\r\n          </div>\r\n        </div>\r\n        <p className=\"programmer\">createBy: @reznkj (tel & instagram)</p>\r\n        {timerComponent}\r\n      </footer>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './game';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n    return ( \r\n            <Game/>\r\n     );\r\n}\r\n \r\nexport default App;","import React, { useState } from 'react';\r\nimport { Gamecontext } from './gamecontext';\r\n\r\nconst GlobalContext = (props) => {\r\n    const [getUserSelected,setUserSelected]=useState(\"\")\r\n    const [getComputerSelected,setComputerSelected]=useState(\"\")\r\n    const [getmessage,setmessage]=useState(\"\")\r\n    \r\n    return ( \r\n        <Gamecontext.Provider\r\n        value={{\r\n            getUserSelected,\r\n            setUserSelected,\r\n            getmessage,\r\n            setmessage,\r\n            getComputerSelected,\r\n            setComputerSelected\r\n        }\r\n        }\r\n        >\r\n        {props.children}\r\n        </Gamecontext.Provider>\r\n     );\r\n}\r\n \r\nexport default GlobalContext;","import { render } from \"react-dom\";\r\nimport App from \"./containers/app\";\r\nimport GlobalContext from \"./context/gameGlobalcontext\";\r\n\r\n\r\nrender(\r\n    <GlobalContext>\r\n        <App/>\r\n    </GlobalContext>\r\n,document.getElementById('root'))\r\n"],"sourceRoot":""}